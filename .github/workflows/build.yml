name: build
on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'NOTICE'
      - '.gitignore'
    branches-ignore:
      - daily
    tags:
      - '*'
jobs:
  build-apple:
    runs-on: macOS-11.0
    strategy:
      fail-fast: false
      matrix:
        name: [macos_arm64, ios, tvos]
        build_type: [debug, release]
    env:
      BUILD_TYPE_ARG: ${{ matrix.build_type == 'debug' && '--debug' || '' }}
    steps:
      - uses: actions/checkout@v2
      - name: Select Xcode 13.0
        run: sudo xcode-select --switch /Applications/Xcode_13.0.app/Contents/Developer
      - name: Build WebRTC for ${{ matrix.name }}
        if: matrix.name == 'macos_arm64'
        run: |
          python3 run.py build ${{ matrix.name }} ${{ env.BUILD_TYPE_ARG }}
          python3 run.py package ${{ matrix.name }} ${{ env.BUILD_TYPE_ARG }}
      - name: Build ${{ matrix.name }}-${{ matrix.build_type }}
        if: matrix.name == 'ios' || matrix.name == 'tvos'
        run: |
          python3 run.py build ${{ matrix.name }} --webrtc-overlap-ios-build-dir --webrtc-nobuild-ios-framework ${{ env.BUILD_TYPE_ARG }}
          python3 run.py package ${{ matrix.name }} --webrtc-overlap-ios-build-dir ${{ env.BUILD_TYPE_ARG }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.tar.gz
          path: _package/${{ matrix.name }}/webrtc.tar.gz
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        name: [windows_x86_64, windows_arm64]
        build_type: [debug, release]
    env:
      BUILD_TYPE_ARG: ${{ matrix.build_type == 'debug' && '--debug' || '' }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Disk Cleanup
        run: |
          Get-PSDrive
          # Cache 済み Docker Image の削除
          docker rmi $(docker images -q -a)
          # Android SDK の削除
          if ($Env:ANDROID_HOME) {
            Remove-Item -Recurse -Force $Env:ANDROID_HOME -ErrorAction Ignore
          }
          if ($Env:ANDROID_NDK_HOME) {
            Remove-Item -Recurse -Force $Env:ANDROID_NDK_HOME -ErrorAction Ignore
          }
          # JVM の削除
          if ($Env:JAVA_HOME_11_X64) {
            Remove-Item -Recurse -Force $Env:JAVA_HOME_11_X64 -ErrorAction Ignore
          }
          if ($Env:JAVA_HOME_8_X64) {
            Remove-Item -Recurse -Force $Env:JAVA_HOME_8_X64 -ErrorAction Ignore
          }
          Get-PSDrive
      - name: Build ${{ matrix.name }}-${{ matrix.build_type }}
        run: |
          # I want to put it under the repository, but there is a problem that the D:\ of GitHub Actions is too small to
          # build.Place the sources in this path. Also, it seems that WebRTC built files must be on the same drive, so
          # set this as well.
          python3 run.py build ${{ matrix.name }} --source-dir 'C:\webrtc' --build-dir 'C:\webrtc-build' ${{ env.BUILD_TYPE_ARG }}
          python3 run.py package ${{ matrix.name }} --source-dir 'C:\webrtc' --build-dir 'C:\webrtc-build' ${{ env.BUILD_TYPE_ARG }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.zip
          path: _package\${{ matrix.name }}\webrtc.zip
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        name:
          - ubuntu-20.04_armv8
          - ubuntu-20.04_x86_64
          - android
        build_type: [debug, release]
    env:
      BUILD_TYPE_ARG: ${{ matrix.build_type == 'debug' && '--debug' || '' }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Disk Cleanup
        run: |
          df -h
          docker rmi `docker images -q -a`
          # 3.9GB
          sudo rm -rf /usr/local/share/boost
          # 17GB
          sudo rm -rf /usr/share/dotnet
          df -h
      - name: Setup ${{ matrix.name }} for x86_64
        if: endsWith(matrix.name, '_x86_64')
        run: sudo scripts/apt_install_x86_64.sh
      - name: Setup ${{ matrix.name }} for arm
        if: contains(matrix.name, '_armv')
        run: sudo scripts/apt_install_arm.sh
      - name: Setup ${{ matrix.name }} for android
        if: matrix.name == 'android'
        run: sudo scripts/apt_install_x86_64.sh && sudo apt-get install -y openjdk-11-jdk
      - name: Build ${{ matrix.name }}-${{ matrix.build_type }}
        run: |
          python3 run.py build ${{ matrix.name }} ${{ env.BUILD_TYPE_ARG }}
          python3 run.py package ${{ matrix.name }} ${{ env.BUILD_TYPE_ARG }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.tar.gz
          path: _package/${{ matrix.name }}/webrtc.tar.gz
  create-release:
    name: Create Release
    if: contains(github.ref, 'tags/m')
    needs:
      - build-windows
      - build-apple
      - build-linux
    runs-on: ubuntu-20.04
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Output upload url
        shell: bash
        run: echo "UPLOAD_URL='${{ steps.create_release.outputs.upload_url }}'" > create-release.env
      - name: Upload create-release Environment
        uses: actions/upload-artifact@v1
        with:
          name: create-release.env
          path: create-release.env
  upload-assets:
    strategy:
      fail-fast: false
      matrix:
        name: [macos_arm64, ios, tvos, ubuntu-20.04_armv8, ubuntu-20.04_x86_64, android]
        build_type: [debug, release]
    name: Release ${{ matrix.name }}-${{ matrix.build_type }}
    if: contains(github.ref, 'tags/m')
    needs:
      - create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download ${{ matrix.name }}-${{ matrix.build_type }}
        uses: actions/download-artifact@v1
        with:
          name: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.tar.gz
      - uses: actions/download-artifact@v1
        with:
          name: create-release.env
      - name: Env to output
        shell: bash
        run: |
          source create-release.env/create-release.env
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
        id: env
      - name: Upload ${{ matrix.name }}-${{ matrix.build_type }} Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.env.outputs.upload_url }}
          asset_path: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.tar.gz/webrtc.tar.gz
          asset_name: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.tar.gz
          asset_content_type: application/gzip
  # Describe separately because Content-Type is different only for Windows.
  upload-assets-windows:
    strategy:
      fail-fast: false
      matrix:
        name: [windows_x86_64, windows_arm64]
        build_type: [debug, release]
    name: Upload windows
    if: contains(github.ref, 'tags/m')
    needs:
      - create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download ${{ matrix.name }}-${{ matrix.build_type }}
        uses: actions/download-artifact@v1
        with:
          name: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.zip
      - uses: actions/download-artifact@v1
        with:
          name: create-release.env
      - name: Env to output
        shell: bash
        run: |
          source create-release.env/create-release.env
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
        id: env
      - name: Upload windows Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.env.outputs.upload_url }}
          asset_path: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.zip/webrtc.zip
          asset_name: webrtc.${{ matrix.name }}-${{ matrix.build_type }}.zip
          asset_content_type: application/zip